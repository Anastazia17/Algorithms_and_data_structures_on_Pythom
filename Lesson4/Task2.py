"""
Задание 2.

Приведен код, который формирует из введенного числа
обратное по порядку входящих в него цифр.
Задача решена через рекурсию

Сделайте замеры времени выполнения кода с помощью модуля timeit

Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры

Подсказка: примените мемоизацию

Добавьте аналитику: что вы сделали и почему
"""

from timeit import timeit

print(timeit("""def recursive_reverse(number):
    if number == 0:
        return str(number % 10)
    return f'{str(number % 10)}{recursive_reverse(number // 10)}'
"""))
# Время выполнения составило: 0.072448 мс

print(timeit("""def memorize(func):
    def g(n, memory={}):
        r = memory.get(n)
        if r is None:
            r = func(n)
            memory[n] = r
        return r
    return g

@memorize
def f(n):
    if n == 0:
        return str(n % 10)
    return f'{str(n % 10)}{f(n // 10)}'
"""))
# Время выполнения составило: 0.32496349999999996 мс

# Весь код был вставлен в декоратор @memorize, что сократило
# время выполнения функции более, чем в 2 раза за счет сохранения
# резкльтатов, полученных многократно.

# Вывод: 2-й вариант гораздо быстрее за счет снижения сложности алгоритма
# и использования словаря memory для повторных результатов.